// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _LeekScriptLexer.flex

package fr.kubys.leekscriptv4.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static fr.kubys.leekscriptv4.psi.LSTypes.*;


public class _LeekScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\2\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\12\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\32\30\1\31\1\32\1\33\1\34"+
    "\1\30\1\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\30\1\46\1\47\1\30\1\50"+
    "\1\51\2\30\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\3\30\1\60\1\61\1\62\7\0\1\2\32\0\1\1"+
    "\11\0\1\63\12\0\1\63\4\0\1\63\5\0\27\63"+
    "\1\0\37\63\1\0\u01ca\63\4\0\14\63\16\0\5\63"+
    "\7\0\1\63\1\0\1\63\201\0\5\63\1\0\2\63"+
    "\2\0\4\63\1\0\1\63\6\0\1\63\1\0\3\63"+
    "\1\0\1\63\1\0\24\63\1\0\123\63\1\0\213\63"+
    "\10\0\246\63\1\0\46\63\2\0\1\63\6\0\51\63"+
    "\107\0\33\63\4\0\4\63\55\0\53\63\43\0\2\63"+
    "\1\0\143\63\1\0\1\63\17\0\2\63\7\0\2\63"+
    "\12\0\3\63\2\0\1\63\20\0\1\63\1\0\36\63"+
    "\35\0\131\63\13\0\1\63\30\0\41\63\11\0\2\63"+
    "\4\0\1\63\5\0\26\63\4\0\1\63\11\0\1\63"+
    "\3\0\1\63\27\0\31\63\7\0\13\63\65\0\25\63"+
    "\1\0\10\63\106\0\66\63\3\0\1\63\22\0\1\63"+
    "\7\0\12\63\17\0\20\63\4\0\10\63\2\0\2\63"+
    "\2\0\26\63\1\0\7\63\1\0\1\63\3\0\4\63"+
    "\3\0\1\63\20\0\1\63\15\0\2\63\1\0\3\63"+
    "\16\0\2\63\12\0\1\63\10\0\6\63\4\0\2\63"+
    "\2\0\26\63\1\0\7\63\1\0\2\63\1\0\2\63"+
    "\1\0\2\63\37\0\4\63\1\0\1\63\23\0\3\63"+
    "\20\0\11\63\1\0\3\63\1\0\26\63\1\0\7\63"+
    "\1\0\2\63\1\0\5\63\3\0\1\63\22\0\1\63"+
    "\17\0\2\63\27\0\1\63\13\0\10\63\2\0\2\63"+
    "\2\0\26\63\1\0\7\63\1\0\2\63\1\0\5\63"+
    "\3\0\1\63\36\0\2\63\1\0\3\63\17\0\1\63"+
    "\21\0\1\63\1\0\6\63\3\0\3\63\1\0\4\63"+
    "\3\0\2\63\1\0\1\63\1\0\2\63\3\0\2\63"+
    "\3\0\3\63\3\0\14\63\26\0\1\63\64\0\10\63"+
    "\1\0\3\63\1\0\27\63\1\0\20\63\3\0\1\63"+
    "\32\0\3\63\5\0\2\63\36\0\1\63\4\0\10\63"+
    "\1\0\3\63\1\0\27\63\1\0\12\63\1\0\5\63"+
    "\3\0\1\63\40\0\1\63\1\0\2\63\17\0\2\63"+
    "\22\0\10\63\1\0\3\63\1\0\51\63\2\0\1\63"+
    "\20\0\1\63\5\0\3\63\10\0\3\63\30\0\6\63"+
    "\5\0\22\63\3\0\30\63\1\0\11\63\1\0\1\63"+
    "\2\0\7\63\72\0\60\63\1\0\2\63\14\0\7\63"+
    "\72\0\2\63\1\0\1\63\1\0\5\63\1\0\30\63"+
    "\1\0\1\63\1\0\12\63\1\0\2\63\11\0\1\63"+
    "\2\0\5\63\1\0\1\63\25\0\4\63\40\0\1\63"+
    "\77\0\10\63\1\0\44\63\33\0\5\63\163\0\53\63"+
    "\24\0\1\63\20\0\6\63\4\0\4\63\3\0\1\63"+
    "\3\0\2\63\7\0\3\63\4\0\15\63\14\0\1\63"+
    "\21\0\46\63\1\0\1\63\5\0\1\63\2\0\53\63"+
    "\1\0\115\63\1\0\4\63\2\0\7\63\1\0\1\63"+
    "\1\0\4\63\2\0\51\63\1\0\4\63\2\0\41\63"+
    "\1\0\4\63\2\0\7\63\1\0\1\63\1\0\4\63"+
    "\2\0\17\63\1\0\71\63\1\0\4\63\2\0\103\63"+
    "\45\0\20\63\20\0\126\63\2\0\6\63\3\0\u016c\63"+
    "\2\0\21\63\1\1\32\63\5\0\113\63\6\0\10\63"+
    "\7\0\15\63\1\0\4\63\16\0\22\63\16\0\22\63"+
    "\16\0\15\63\1\0\3\63\17\0\64\63\43\0\1\63"+
    "\4\0\1\63\103\0\131\63\7\0\5\63\2\0\42\63"+
    "\1\0\1\63\5\0\106\63\12\0\37\63\61\0\36\63"+
    "\2\0\5\63\13\0\54\63\4\0\32\63\66\0\27\63"+
    "\11\0\65\63\122\0\1\63\135\0\57\63\21\0\7\63"+
    "\67\0\36\63\15\0\2\63\12\0\54\63\32\0\44\63"+
    "\51\0\3\63\12\0\44\63\2\0\11\63\7\0\53\63"+
    "\2\0\3\63\51\0\4\63\1\0\6\63\1\0\2\63"+
    "\3\0\1\63\5\0\300\63\100\0\26\63\2\0\6\63"+
    "\2\0\46\63\2\0\6\63\2\0\10\63\1\0\1\63"+
    "\1\0\1\63\1\0\1\63\1\0\37\63\2\0\65\63"+
    "\1\0\7\63\1\0\1\63\3\0\3\63\1\0\7\63"+
    "\3\0\4\63\2\0\6\63\4\0\15\63\5\0\3\63"+
    "\1\0\7\63\3\0\13\1\35\0\2\2\5\0\1\1"+
    "\57\0\1\1\21\0\1\63\15\0\1\63\20\0\15\63"+
    "\145\0\1\63\4\0\1\63\2\0\12\63\1\0\1\63"+
    "\3\0\5\63\6\0\1\63\1\0\1\63\1\0\1\63"+
    "\1\0\4\63\1\0\13\63\2\0\4\63\5\0\5\63"+
    "\4\0\1\63\64\0\2\63\u017b\0\57\63\1\0\57\63"+
    "\1\0\205\63\6\0\4\63\3\0\2\63\14\0\46\63"+
    "\1\0\1\63\5\0\1\63\2\0\70\63\7\0\1\63"+
    "\20\0\27\63\11\0\7\63\1\0\7\63\1\0\7\63"+
    "\1\0\7\63\1\0\7\63\1\0\7\63\1\0\7\63"+
    "\1\0\7\63\120\0\1\63\320\0\1\1\4\0\2\63"+
    "\52\0\5\63\5\0\2\63\4\0\126\63\6\0\3\63"+
    "\1\0\132\63\1\0\4\63\5\0\53\63\1\0\136\63"+
    "\21\0\33\63\65\0\306\63\112\0\360\63\20\0\215\63"+
    "\103\0\56\63\2\0\15\63\3\0\20\63\12\0\2\63"+
    "\24\0\57\63\20\0\37\63\2\0\106\63\61\0\11\63"+
    "\2\0\147\63\2\0\65\63\2\0\5\63\60\0\13\63"+
    "\1\0\3\63\1\0\4\63\1\0\27\63\35\0\64\63"+
    "\16\0\62\63\76\0\6\63\3\0\1\63\1\0\2\63"+
    "\13\0\34\63\12\0\27\63\31\0\35\63\7\0\57\63"+
    "\34\0\1\63\20\0\5\63\1\0\12\63\12\0\5\63"+
    "\1\0\51\63\27\0\3\63\1\0\10\63\24\0\27\63"+
    "\3\0\1\63\3\0\62\63\1\0\1\63\3\0\2\63"+
    "\2\0\5\63\2\0\1\63\1\0\1\63\30\0\3\63"+
    "\2\0\13\63\7\0\3\63\14\0\6\63\2\0\6\63"+
    "\2\0\6\63\11\0\7\63\1\0\7\63\1\0\53\63"+
    "\1\0\14\63\10\0\163\63\35\0\244\63\14\0\27\63"+
    "\4\0\61\63\4\0\u0100\64\156\63\2\0\152\63\46\0"+
    "\7\63\14\0\5\63\5\0\1\63\1\0\12\63\1\0"+
    "\15\63\1\0\5\63\1\0\1\63\1\0\2\63\1\0"+
    "\2\63\1\0\154\63\41\0\153\63\22\0\100\63\2\0"+
    "\66\63\50\0\14\63\164\0\5\63\1\0\207\63\44\0"+
    "\32\63\6\0\32\63\13\0\131\63\3\0\6\63\2\0"+
    "\6\63\2\0\6\63\2\0\3\63\43\0\14\63\1\0"+
    "\32\63\1\0\23\63\1\0\2\63\1\0\17\63\2\0"+
    "\16\63\42\0\173\63\205\0\35\63\3\0\61\63\57\0"+
    "\40\63\15\0\24\63\1\0\10\63\6\0\46\63\12\0"+
    "\36\63\2\0\44\63\4\0\10\63\60\0\236\63\22\0"+
    "\44\63\4\0\44\63\4\0\50\63\10\0\64\63\234\0"+
    "\67\63\11\0\26\63\12\0\10\63\230\0\6\63\2\0"+
    "\1\63\1\0\54\63\1\0\2\63\3\0\1\63\2\0"+
    "\27\63\12\0\27\63\11\0\37\63\101\0\23\63\1\0"+
    "\2\63\12\0\26\63\12\0\32\63\106\0\70\63\6\0"+
    "\2\63\100\0\1\63\17\0\4\63\1\0\3\63\1\0"+
    "\35\63\52\0\35\63\3\0\35\63\43\0\10\63\1\0"+
    "\34\63\33\0\66\63\12\0\26\63\12\0\23\63\15\0"+
    "\22\63\156\0\111\63\67\0\63\63\15\0\63\63\15\0"+
    "\44\63\334\0\35\63\12\0\1\63\10\0\26\63\232\0"+
    "\27\63\14\0\65\63\113\0\55\63\40\0\31\63\32\0"+
    "\44\63\35\0\1\63\13\0\43\63\3\0\1\63\14\0"+
    "\60\63\16\0\4\63\25\0\1\63\1\0\1\63\43\0"+
    "\22\63\1\0\31\63\124\0\7\63\1\0\1\63\1\0"+
    "\4\63\1\0\17\63\1\0\12\63\7\0\57\63\46\0"+
    "\10\63\2\0\2\63\2\0\26\63\1\0\7\63\1\0"+
    "\2\63\1\0\5\63\3\0\1\63\22\0\1\63\14\0"+
    "\5\63\236\0\65\63\22\0\4\63\24\0\1\63\40\0"+
    "\60\63\24\0\2\63\1\0\1\63\270\0\57\63\51\0"+
    "\4\63\44\0\60\63\24\0\1\63\73\0\53\63\15\0"+
    "\1\63\107\0\33\63\345\0\54\63\164\0\100\63\37\0"+
    "\1\63\240\0\10\63\2\0\47\63\20\0\1\63\1\0"+
    "\1\63\34\0\1\63\12\0\50\63\7\0\1\63\25\0"+
    "\1\63\13\0\56\63\23\0\1\63\42\0\71\63\7\0"+
    "\11\63\1\0\45\63\21\0\1\63\61\0\36\63\160\0"+
    "\7\63\1\0\2\63\1\0\46\63\25\0\1\63\31\0"+
    "\6\63\1\0\2\63\1\0\40\63\16\0\1\63\u0147\0"+
    "\23\63\15\0\232\63\346\0\304\63\274\0\57\63\321\0"+
    "\107\63\271\0\71\63\7\0\37\63\161\0\36\63\22\0"+
    "\60\63\20\0\4\63\37\0\25\63\5\0\23\63\260\0"+
    "\100\63\200\0\113\63\5\0\1\63\102\0\15\63\100\0"+
    "\2\63\1\0\1\63\34\0\370\63\10\0\363\63\15\0"+
    "\37\63\61\0\3\63\21\0\4\63\10\0\u018c\63\4\0"+
    "\153\63\5\0\15\63\3\0\11\63\7\0\12\63\146\0"+
    "\125\63\1\0\107\63\1\0\2\63\2\0\1\63\2\0"+
    "\2\63\2\0\4\63\1\0\14\63\1\0\1\63\1\0"+
    "\7\63\1\0\101\63\1\0\4\63\2\0\10\63\1\0"+
    "\7\63\1\0\34\63\1\0\4\63\1\0\5\63\1\0"+
    "\1\63\3\0\7\63\1\0\u0154\63\2\0\31\63\1\0"+
    "\31\63\1\0\37\63\1\0\31\63\1\0\37\63\1\0"+
    "\31\63\1\0\37\63\1\0\31\63\1\0\37\63\1\0"+
    "\31\63\1\0\10\63\64\0\55\63\12\0\7\63\20\0"+
    "\1\63\u0171\0\54\63\24\0\305\63\73\0\104\63\7\0"+
    "\1\63\264\0\4\63\1\0\33\63\1\0\2\63\1\0"+
    "\1\63\2\0\1\63\1\0\12\63\1\0\4\63\1\0"+
    "\1\63\1\0\1\63\6\0\1\63\4\0\1\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\2\63\1\0"+
    "\1\63\2\0\1\63\1\0\1\63\1\0\1\63\1\0"+
    "\1\63\1\0\1\63\1\0\2\63\1\0\1\63\2\0"+
    "\4\63\1\0\7\63\1\0\4\63\1\0\4\63\1\0"+
    "\1\63\1\0\12\63\1\0\21\63\5\0\3\63\1\0"+
    "\5\63\1\0\21\63\104\0\327\63\51\0\65\63\13\0"+
    "\336\63\2\0\u0182\63\16\0\u0131\63\37\0\36\63\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\16\25\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\0\1\36\1\37\2\0\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\0\1\46\1\47\1\15"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\3\25\1\56"+
    "\5\25\1\57\1\60\2\25\1\61\4\25\1\62\1\63"+
    "\1\64\1\0\1\65\1\66\1\67\4\25\1\70\2\25"+
    "\1\71\3\25\1\72\1\25\1\73\2\25\1\74\3\25"+
    "\1\75\1\25\1\76\1\25\1\77\1\25\1\100\3\25"+
    "\1\101\2\25\1\102\1\103\2\25\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\65\0\u0109\0\u013e"+
    "\0\65\0\65\0\u0173\0\u01a8\0\65\0\u01dd\0\u0212\0\u0247"+
    "\0\65\0\65\0\u027c\0\u02b1\0\u02e6\0\65\0\65\0\u031b"+
    "\0\65\0\65\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\65\0\u066b\0\65\0\u06a0\0\324\0\65\0\u06d5"+
    "\0\65\0\65\0\u013e\0\u070a\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\u073f\0\u0774\0\65\0\u07a9\0\65\0\65"+
    "\0\u07de\0\65\0\u0813\0\65\0\u0848\0\u087d\0\u08b2\0\u031b"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u031b\0\u031b\0\u09f0"+
    "\0\u0a25\0\u031b\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\65\0\65"+
    "\0\65\0\u0b2e\0\65\0\65\0\u031b\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u031b\0\u0c37\0\u0c6c\0\u031b\0\u0ca1\0\u0cd6\0\u0d0b"+
    "\0\u031b\0\u0d40\0\u073f\0\u0d75\0\u0daa\0\u031b\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\u031b\0\u0e7e\0\u031b\0\u0eb3\0\u031b\0\u0ee8\0\u031b"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u031b\0\u0fbc\0\u0ff1\0\u031b\0\u031b"+
    "\0\u1026\0\u105b\0\u031b\0\u031b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\2\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\2\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\30\1\43\2\30\1\44\1\45"+
    "\1\46\1\30\1\47\1\30\1\50\1\51\1\52\1\53"+
    "\1\54\1\30\1\2\66\0\2\3\106\0\1\55\40\0"+
    "\4\56\1\57\25\56\1\60\32\56\6\0\1\61\15\0"+
    "\1\62\40\0\7\63\1\57\22\63\1\64\32\63\12\0"+
    "\1\65\11\0\1\66\53\0\1\67\10\0\1\70\55\0"+
    "\1\71\6\0\1\72\52\0\1\73\4\0\1\74\4\0"+
    "\1\75\56\0\1\76\1\0\1\20\67\0\1\77\1\100"+
    "\64\0\1\101\64\0\1\102\1\103\57\0\1\30\7\0"+
    "\1\30\4\0\23\30\31\0\1\104\60\0\1\30\7\0"+
    "\1\30\4\0\13\30\1\105\7\30\25\0\1\30\7\0"+
    "\1\30\4\0\15\30\1\106\5\30\25\0\1\30\7\0"+
    "\1\30\4\0\14\30\1\107\6\30\25\0\1\30\7\0"+
    "\1\30\4\0\14\30\1\110\6\30\25\0\1\30\7\0"+
    "\1\30\4\0\12\30\1\111\10\30\25\0\1\30\7\0"+
    "\1\30\4\0\1\112\13\30\1\113\3\30\1\114\2\30"+
    "\25\0\1\30\7\0\1\30\4\0\12\30\1\115\10\30"+
    "\25\0\1\30\7\0\1\30\4\0\5\30\1\116\5\30"+
    "\1\117\7\30\25\0\1\30\7\0\1\30\4\0\14\30"+
    "\1\120\3\30\1\121\2\30\25\0\1\30\7\0\1\30"+
    "\4\0\15\30\1\122\5\30\25\0\1\30\7\0\1\30"+
    "\4\0\4\30\1\123\16\30\25\0\1\30\7\0\1\30"+
    "\4\0\15\30\1\124\5\30\25\0\1\30\7\0\1\30"+
    "\4\0\1\125\22\30\25\0\1\30\7\0\1\30\4\0"+
    "\7\30\1\126\13\30\31\0\1\127\34\0\1\130\27\0"+
    "\1\131\40\0\2\56\1\0\61\56\1\0\2\63\1\0"+
    "\61\63\1\0\2\73\1\0\7\73\1\132\51\73\1\0"+
    "\2\74\1\0\61\74\21\0\1\76\70\0\1\133\65\0"+
    "\1\134\57\0\1\30\7\0\1\30\4\0\3\30\1\135"+
    "\17\30\25\0\1\30\7\0\1\30\4\0\4\30\1\136"+
    "\16\30\25\0\1\30\7\0\1\30\4\0\13\30\1\137"+
    "\7\30\25\0\1\30\7\0\1\30\4\0\16\30\1\140"+
    "\4\30\25\0\1\30\7\0\1\30\4\0\12\30\1\141"+
    "\10\30\25\0\1\30\7\0\1\30\4\0\15\30\1\142"+
    "\5\30\25\0\1\30\7\0\1\30\4\0\13\30\1\143"+
    "\7\30\25\0\1\30\7\0\1\30\4\0\14\30\1\144"+
    "\6\30\25\0\1\30\7\0\1\30\4\0\17\30\1\145"+
    "\3\30\25\0\1\30\7\0\1\30\4\0\12\30\1\146"+
    "\10\30\25\0\1\30\7\0\1\30\4\0\17\30\1\147"+
    "\3\30\25\0\1\30\7\0\1\30\4\0\20\30\1\150"+
    "\2\30\25\0\1\30\7\0\1\30\4\0\15\30\1\151"+
    "\5\30\25\0\1\30\7\0\1\30\4\0\10\30\1\152"+
    "\12\30\5\0\2\73\1\0\7\73\1\132\4\73\1\153"+
    "\44\73\21\0\1\30\7\0\1\30\4\0\1\154\22\30"+
    "\25\0\1\30\7\0\1\30\4\0\17\30\1\155\3\30"+
    "\25\0\1\30\7\0\1\30\4\0\4\30\1\156\16\30"+
    "\25\0\1\30\7\0\1\30\4\0\16\30\1\157\4\30"+
    "\25\0\1\30\7\0\1\30\4\0\2\30\1\160\20\30"+
    "\25\0\1\30\7\0\1\30\4\0\1\30\1\161\21\30"+
    "\25\0\1\30\7\0\1\30\4\0\12\30\1\162\10\30"+
    "\25\0\1\30\7\0\1\30\4\0\20\30\1\163\2\30"+
    "\25\0\1\30\7\0\1\30\4\0\4\30\1\164\16\30"+
    "\25\0\1\30\7\0\1\30\4\0\12\30\1\165\10\30"+
    "\25\0\1\30\7\0\1\30\4\0\11\30\1\166\11\30"+
    "\25\0\1\30\7\0\1\30\4\0\10\30\1\167\12\30"+
    "\25\0\1\30\7\0\1\30\4\0\4\30\1\170\16\30"+
    "\25\0\1\30\7\0\1\30\4\0\17\30\1\171\3\30"+
    "\25\0\1\30\7\0\1\30\4\0\1\172\22\30\25\0"+
    "\1\30\7\0\1\30\4\0\15\30\1\173\5\30\25\0"+
    "\1\30\7\0\1\30\4\0\4\30\1\174\16\30\25\0"+
    "\1\30\7\0\1\30\4\0\13\30\1\175\7\30\25\0"+
    "\1\30\7\0\1\30\4\0\10\30\1\176\12\30\25\0"+
    "\1\30\7\0\1\30\4\0\12\30\1\177\10\30\25\0"+
    "\1\30\7\0\1\30\4\0\13\30\1\200\7\30\25\0"+
    "\1\30\7\0\1\30\4\0\20\30\1\201\2\30\25\0"+
    "\1\30\7\0\1\30\4\0\14\30\1\202\6\30\25\0"+
    "\1\30\7\0\1\30\4\0\4\30\1\203\16\30\25\0"+
    "\1\30\7\0\1\30\4\0\13\30\1\204\7\30\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4240];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\3\1\2\11\3\1\2\11\1\1\2\11\17\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\11\1\0\2\11\2\0"+
    "\6\11\1\0\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\22\1\3\11\1\0\2\11\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _LeekScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LeekScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 70: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 71: break;
          case 3:
            { return OP_EXCLAMATION_MARK;
            }
          // fall through
          case 72: break;
          case 4:
            { return OP_MODULO;
            }
          // fall through
          case 73: break;
          case 5:
            { return OP_BINARY_AND;
            }
          // fall through
          case 74: break;
          case 6:
            { return OP_LPAREN;
            }
          // fall through
          case 75: break;
          case 7:
            { return OP_RPAREN;
            }
          // fall through
          case 76: break;
          case 8:
            { return OP_TIMES;
            }
          // fall through
          case 77: break;
          case 9:
            { return OP_PLUS;
            }
          // fall through
          case 78: break;
          case 10:
            { return OP_COMMA;
            }
          // fall through
          case 79: break;
          case 11:
            { return OP_MINUS;
            }
          // fall through
          case 80: break;
          case 12:
            { return OP_DIVIDE;
            }
          // fall through
          case 81: break;
          case 13:
            { return NUMBER;
            }
          // fall through
          case 82: break;
          case 14:
            { return OP_COLON;
            }
          // fall through
          case 83: break;
          case 15:
            { return OP_SEMICOLON;
            }
          // fall through
          case 84: break;
          case 16:
            { return OP_LT;
            }
          // fall through
          case 85: break;
          case 17:
            { return OP_ASSIGN;
            }
          // fall through
          case 86: break;
          case 18:
            { return OP_GT;
            }
          // fall through
          case 87: break;
          case 19:
            { return OP_TERNARY;
            }
          // fall through
          case 88: break;
          case 20:
            { return OP_REFERENCE;
            }
          // fall through
          case 89: break;
          case 21:
            { return IDENTIFIER;
            }
          // fall through
          case 90: break;
          case 22:
            { return OP_LBRACKET;
            }
          // fall through
          case 91: break;
          case 23:
            { return OP_RBRACKET;
            }
          // fall through
          case 92: break;
          case 24:
            { return OP_XOR;
            }
          // fall through
          case 93: break;
          case 25:
            { return OP_LBRACE;
            }
          // fall through
          case 94: break;
          case 26:
            { return OP_BINARY_OR;
            }
          // fall through
          case 95: break;
          case 27:
            { return OP_RBRACE;
            }
          // fall through
          case 96: break;
          case 28:
            { return OP_NOT_EQUALS;
            }
          // fall through
          case 97: break;
          case 29:
            { return STRING;
            }
          // fall through
          case 98: break;
          case 30:
            { return OP_LOGICAL_AND;
            }
          // fall through
          case 99: break;
          case 31:
            { return OP_AND_EQ;
            }
          // fall through
          case 100: break;
          case 32:
            { return OP_POW;
            }
          // fall through
          case 101: break;
          case 33:
            { return OP_TIMES_EQ;
            }
          // fall through
          case 102: break;
          case 34:
            { return OP_INC;
            }
          // fall through
          case 103: break;
          case 35:
            { return OP_PLUS_EQ;
            }
          // fall through
          case 104: break;
          case 36:
            { return OP_DEC;
            }
          // fall through
          case 105: break;
          case 37:
            { return OP_MINUS_EQ;
            }
          // fall through
          case 106: break;
          case 38:
            { return COMMENT;
            }
          // fall through
          case 107: break;
          case 39:
            { return OP_DIVIDE_EQ;
            }
          // fall through
          case 108: break;
          case 40:
            { return OP_LSHIFT;
            }
          // fall through
          case 109: break;
          case 41:
            { return OP_LE;
            }
          // fall through
          case 110: break;
          case 42:
            { return OP_EQUALS;
            }
          // fall through
          case 111: break;
          case 43:
            { return OP_GE;
            }
          // fall through
          case 112: break;
          case 44:
            { return OP_RSHIFT;
            }
          // fall through
          case 113: break;
          case 45:
            { return OP_XOR_EQ;
            }
          // fall through
          case 114: break;
          case 46:
            { return KW_DO;
            }
          // fall through
          case 115: break;
          case 47:
            { return KW_IF;
            }
          // fall through
          case 116: break;
          case 48:
            { return KW_IN;
            }
          // fall through
          case 117: break;
          case 49:
            { return OP_OR;
            }
          // fall through
          case 118: break;
          case 50:
            { return OP_OR_EQ;
            }
          // fall through
          case 119: break;
          case 51:
            { return OP_LOGICAL_OR;
            }
          // fall through
          case 120: break;
          case 52:
            { return OP_IDENTITY_NOT_EQUALS;
            }
          // fall through
          case 121: break;
          case 53:
            { return OP_IDENTITY_EQUALS;
            }
          // fall through
          case 122: break;
          case 54:
            { return OP_UNSIGNED_RSHIFT;
            }
          // fall through
          case 123: break;
          case 55:
            { return OP_AND;
            }
          // fall through
          case 124: break;
          case 56:
            { return KW_FOR;
            }
          // fall through
          case 125: break;
          case 57:
            { return OP_NOT;
            }
          // fall through
          case 126: break;
          case 58:
            { return KW_VAR;
            }
          // fall through
          case 127: break;
          case 59:
            { return C_STYLE_COMMENT;
            }
          // fall through
          case 128: break;
          case 60:
            { return KW_ELSE;
            }
          // fall through
          case 129: break;
          case 61:
            { return KW_NULL;
            }
          // fall through
          case 130: break;
          case 62:
            { return KW_TRUE;
            }
          // fall through
          case 131: break;
          case 63:
            { return KW_BREAK;
            }
          // fall through
          case 132: break;
          case 64:
            { return KW_FALSE;
            }
          // fall through
          case 133: break;
          case 65:
            { return KW_WHILE;
            }
          // fall through
          case 134: break;
          case 66:
            { return KW_GLOBAL;
            }
          // fall through
          case 135: break;
          case 67:
            { return KW_RETURN;
            }
          // fall through
          case 136: break;
          case 68:
            { return KW_CONTINUE;
            }
          // fall through
          case 137: break;
          case 69:
            { return KW_FUNCTION;
            }
          // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
